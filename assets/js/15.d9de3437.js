(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{401:function(n,t,e){"use strict";e.r(t);var a=e(17),i=Object(a.a)({},function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("p",[n._v("flutter 动画入门")]),n._v(" "),e("p",[n._v("在学习flutter的动画之前，先复习一下css的动画。我觉得两者是有点相似的。那么开始复习css的动画了。\n"),e("br"),n._v("\ncss的动画有transition（过渡）和animation（动画）。\n"),e("br")]),e("h4",[n._v("transition")]),n._v("\ncss transition由transition-property(指定哪些属性变化时会有过渡效果) transition-duration(过渡的时长) transition-timing-function(过渡的变化效果 比如linear线性变化) transition-delay(指定延迟 多久后执行过渡效果)组成。\n"),e("br"),n._v("\n那么知道了组成我们来一个动画效果吧\n"),e("br"),e("p"),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('<div class="box">Lorem</div>\n\n.box {\n  width: 100px;\n  height: 100px;\n  background: red;\n  transition: 1s 0s transform ease;\n}\n\n.box:hover {\n  transform: translateY(10px);\n}\n\n')])])]),e("br"),n._v("\n这样就实现了一个简单向下移动的动画。\n"),e("br"),n._v("\n那么在flutter中是否也这些属性，显然大部分是有的。那么开始介绍在flutter中是怎么实现这些属性的。\n"),e("br"),n._v("\nflutter 有个核心类（Animation）来指导动画的值。\n"),e("br"),n._v("\n首先要创建一个AnimationController\n"),e("br"),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("final AnimationController controller = new AnimationController(duration: const Duration(milliseconds: 2000), vsync: this);\n")])])]),e("br"),n._v("\n在创建的时候也可以定义这个动画时长。也就是transition-duration。但是这里有区别的是，这里还需要定一个reverseDuration（此动画在反向播放时应持续的时间长度）时长,不设置的话，取duration时长。\n"),e("br"),n._v("\n然后就是定义一下动画的变化曲线。\n"),e("br"),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("final CurvedAnimation curve = new CurvedAnimation(parent: controller, curve: Curves.easeIn);\n")])])]),e("br"),n._v("\n当然这个你也可以自己创建一种变化曲线.\n"),e("br"),n._v("\n接着就是定义一下动画的变化幅度\n"),e("br"),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("final Tween doubleTween = new Tween<double>(begin: Offset(0.0, 0.0), end: Offset(0.0, 50.0));\n")])])]),e("br"),n._v("\n这个仅仅只是定义了变化的幅度，你还需要将这些值赋值到你想这个变化的那个属性上（transition-property），比如你要将这个图片上下移动，你就需要这样赋值。\n"),e("br"),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("Transform.translate(\n    offset: doubleTween.value,\n    child: Image.asset(\n        this.img,\n        width: 100,\n    ),\n),\n")])])]),e("br"),n._v("\n当然Tween不仅仅只能变化值，还可以变化颜色等等。\n"),e("br"),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("final Tween colorTween = new ColorTween(begin: Colors.transparent, end: Colors.black54)\n")])])]),e("br"),n._v("\n其他的变化可以参考文档[Twwen](https://api.flutter.dev/flutter/animation/Tween-class.html)。Tween有个缺点就是只有begin end，所以如果需要实现css的animation的自定义动画效果，就需要多段动画接连执行。\n"),e("br"),n._v("\n最后就是让这个动画开始\n"),e("br"),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("animationController.forward(); // 执行一次动画。\n")])])]),e("br"),n._v("\n但是这只是执行一个动画如果要动画重复执行就需要监听动画的状态。\n"),e("br"),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("animationController.addStatusListener((AnimationStatus status) {\n    if (status == AnimationStatus.completed) {\n    animationController.reverse();\n    } else if (status == AnimationStatus.dismissed) {\n    animationController.forward();\n    }\n});\n")])])]),e("br"),n._v("\n如上就是flutter的简单动画。下面就上一下全部代码\n"),e("br"),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("import 'package:flutter/material.dart';\nimport 'package:flutter/animation.dart';\n\nclass AnimPage2 extends StatefulWidget {\n  AnimPage2({Key key, this.img, this.width}) : super(key: key);\n  String img;\n  int width;\n  @override\n  State<StatefulWidget> createState() {\n    return _AnimPage2();\n  }\n}\n\nclass _AnimPage2 extends State<AnimPage2> with TickerProviderStateMixin {\n  var w = 100.0;\n  var h = 100.0;\n\n  String img;\n  int width;\n\n  Animation<Offset>  animation;\n  Animation<Offset>  animationback;\n  AnimationController animationController;\n\n  @override\n  void initState() {\n    super.initState();\n    img = widget.img;\n    width = widget.width;\n    // 创建 AnimationController，用于控制动画\n    // 必须提供动画时间\n    // animationController = new AnimationController(vsync: this, duration: Duration(milliseconds: 1500));\n    // // 创建一个插值器，关联 AnimationController，返回一个新的 Animation 对象\n    // animation = Tween<double>(begin: 100.0, end: 100.0 * 2.0).animate(animationController);\n\n    animationController = new AnimationController(\n      vsync: this,\n      duration: Duration(milliseconds: 1000),\n      reverseDuration: Duration(milliseconds: 3000),\n    );\n    final CurvedAnimation curve = new CurvedAnimation(parent: animationController, curve: Curves.easeIn);\n    animation = new Tween<Offset>(begin: const Offset(0.0, 0.0), end: const Offset(0.0, 50.0)).animate(curve);\n    animationController.addListener(() {\n      setState(() {});\n    });\n\n    animationController.addStatusListener((AnimationStatus status) {\n      if (status == AnimationStatus.completed) {\n        animationController.reverse();\n      } else if (status == AnimationStatus.dismissed) {\n        animationController.forward();\n      }\n    });\n    // 开始播放动画\n    animationController.forward();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Container(\n      alignment: Alignment.topCenter,\n      child: Transform.translate(\n        offset: animation.value,\n        child: Image.asset(\n          this.img,\n          width: 100,\n        ),\n      ),\n      width: 200,\n    );\n  }\n\n  @override\n  void dispose() {\n    // 动画使用完成后必需要销毁\n    animationController.dispose();\n    super.dispose();\n  }\n}\n\n")])])])])},[],!1,null,null,null);t.default=i.exports}}]);