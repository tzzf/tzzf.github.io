(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{409:function(e,t,r){"use strict";r.r(t);var n=r(17),s=Object(n.a)({},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("p",[e._v("Prettier提升代码规范")]),e._v(" "),r("h2",{attrs:{id:"痛点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#痛点","aria-hidden":"true"}},[e._v("#")]),e._v(" 痛点")]),e._v(" "),r("p",[e._v("在个人学习成长过程或者项目迭代中，经常会写一些千奇百怪的代码为了实现一些功能或者效果。为了挽回这些“错误”代码，那么需要将这些代码进行格式化。Prettier是代码格式工具。下面我就会用这个来提升格式代码效率。")]),e._v(" "),r("h2",{attrs:{id:"prettier-eslint-使用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#prettier-eslint-使用","aria-hidden":"true"}},[e._v("#")]),e._v(" prettier + eslint 使用")]),e._v(" "),r("p",[e._v("众所周知eslint只是检查代码并提示，格式化代码的功能比较有限。所以就需要用Prettier来格式化代码。\n"),r("br"),e._v("\n下面我就用之前写的练习组件库的项目（此项目非vue-cli生成，所以在可能插件并不能通用在vue-cli生成项目）来举举例子。\n"),r("br"),e._v("\n我原项目已经集成了eslint，所以我就不安装了")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("yarn add --dev eslint-plugin-prettier eslint-config-prettier prettier-eslint-cli\n")])])]),r("br"),e._v("\n安装以上插件，然后配置.eslintrc.js\n"),r("br"),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('module.exports = {\n  ....\n  extends: [\n    "plugin:vue/essential",\n    "plugin:prettier/recommended",\n    "eslint:recommended"\n  ],\n  ...\n};\n\n')])])]),r("p",[e._v("eslint-plugin-prettier 插件，可以让eslint使用prettier规则进行检查，并使用--fix选项。这个插件是依赖eslint-plugin-prettier 和 eslint-config-prettier。")]),e._v(" "),r("br"),e._v(" "),r("p",[e._v("然后就是添加npm script 脚本流。")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('{\n  "scripts": {\n    "eslint-fix": "eslint packages/**/**/*.vue  examples/**/**/*.vue --fix"",\n  }\n}\n')])])]),r("p",[e._v("运行 yarn eslint-fix 就可以格式化代码了。\n"),r("br")]),e._v(" "),r("p",[e._v("现在已经可以格式化代码。当然只是做到这个是不够的。我们还需要pre-commit Hook 约束代码提交，不仅仅只是让你之前的代码没有问题，还要让你之后提交的代码都会被格式化。我们可以使用插件husky和lint-staged来规范")]),e._v(" "),r("br"),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('yarn add lint-staged husky --dev\n\n\n"lint-staged": {\n    "**/**.{js,css,vue}": [\n      "prettier --write", // 先使用prettier进行格式化\n      "eslint --fix", // 再使用eslint进行自动修复\n      "git add" // 所有通过的话执行git\n    ]\n},\n"husky": {\n    "hooks": {\n      "pre-commit": "lint-staged" // pre-commit，提交前的钩子\n    }\n}\n')])])]),r("p",[r("a",{attrs:{href:"https://github.com/tzzf/zzfui/commit/fe449ef8dfbad750271f9b5aebcde92bea3ef4e3",target:"_blank",rel:"noopener noreferrer"}},[e._v("prettier更新commit"),r("OutboundLink")],1)]),e._v(" "),r("br"),e._v("\n这样以后写代码就不用担心自己的写代码不规范了，若是你想要自己更改规范的话，就在根目录生成.prettierrrc文件，自己定义写。\n"),r("h2",{attrs:{id:"总结"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#总结","aria-hidden":"true"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),r("p",[e._v("遇到一些重复性操作的流程，有在一定的时间的情况下，一定要去尝试去用自动化工具来解决这些问题。")])])},[],!1,null,null,null);t.default=s.exports}}]);