(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{411:function(e,n,t){"use strict";t.r(n);var r=t(17),a=Object(r.a)({},function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("高扩展性类")]),e._v(" "),t("p",[e._v("最近在写ant design pro脚手架生成的ts项目，想把之前js版本的from表单区块升级成ts版本，遇到了一个问题，于是想记录下。\n"),t("br"),e._v("\n问题就是不同的表单提交项，JSON Schema内的需要传的值就不同。比如下拉选择就需要下拉选择的内容，日期选择就需要格式化后的格式等等。对于高扩展性的表单提交项，其JSON Schema对应的类也应该具有高拓展性。")]),e._v(" "),t("br"),e._v(" "),t("h4",{attrs:{id:"extract"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#extract","aria-hidden":"true"}},[e._v("#")]),e._v(" "),t("a",{attrs:{href:"https://www.tslang.cn/docs/release-notes/typescript-2.9.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Extract"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("ts官网是这么介绍的， 现在是Extract<keyof T, string>。（换句话说，是keyof T的子集，它仅包含类字符串的值。）。所以可以理解 在keyof T范围下满足第二个条件的一个子集。那么下面看看代码更改前后的变化。")]),e._v(" "),t("br"),e._v("\nbefore\n"),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("import SearchSelect, { SearchInputProps } from './SearchSelect';\n\nexport interface listItem extends SearchInputProps, ChargeManagementListProps {\n  list?: any[];\n  name: string;\n  type: string;\n  span?: number;\n  label?: string;\n  required?: boolean | undefined;\n  message?: string;\n  mode?: \"multiple\" | \"tags\" | undefined;\n  initValue?: any;\n  maxLength?: number;\n  precision?: number;\n  selectArr?: selectItem[];\n  serverFormat?: string;\n  picker?: 'week' | 'month' | 'year' | undefined;\n  handleChange?: (props: any) => void;\n  [propName: string]: any;\n}\n\nexport interface selectItem {\n  name: any;\n  value: number;\n}\n\ninterface BaseFormProps {\n  type: number;\n  cancelFunc?: () => void;\n  okFunc?: (props: any) => void;\n  resetFunc?: () => void;\n  list?: listItem[];\n}\n")])])]),t("p",[e._v("listItem这个类只能加?来规避不同的提交项不同的传值，可以说写的不人性化。")]),e._v(" "),t("br"),e._v(" "),t("p",[e._v("after")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("\ntype TypeProps = 'Text' | 'Select' | 'TextArea' | 'Group' | 'InputNumber' | 'Password' | 'SearchSelect' | 'DateRange' | 'ChargeManagementList';\n\ntype TextItem = {\n  type?: Extract<TypeProps, 'Text'>,\n}\n\ntype SelectItem = {\n  type?: Extract<TypeProps, 'Select'>,\n  selectArr: selectItem[];\n  mode?: \"multiple\" | \"tags\" | undefined;\n}\n\ntype TextAreaItem = {\n  type?: Extract<TypeProps, 'TextArea'>,\n}\n\n\ntype GroupItem = {\n  type?: Extract<TypeProps, 'Group'>,\n  selectArr: selectItem[];\n}\n\ntype InputNumberItem = {\n  type?: Extract<TypeProps, 'InputNumber'>,\n}\n\ntype PasswordItem = {\n  type?: Extract<TypeProps, 'Password'>,\n}\n\nexport type SearchSelectItem = {\n  type?: Extract<TypeProps, 'SearchSelect'>,\n  placeholder?: string;\n  style?: any;\n  getListApi: (props: any) => Promise<any>;\n  onChange?: (props: any) => void;\n}\n\ntype DateRangePicekr = {\n  type?: Extract<TypeProps, 'DateRange'>,\n  picker: 'week' | 'month' | 'year';\n}\n\nexport type ChargeManagementListItem = {\n  list: any[];\n  onChange?: (props: any) => void;\n  type?: Extract<TypeProps, 'ChargeManagementList'>,\n}\n\n\ntype FormConfigItemProps = SelectItem | DateRangePicekr | TextItem | ChargeManagementListItem | SearchSelectItem | TextAreaItem | GroupItem | InputNumberItem | PasswordItem;\n\nexport type listItem = {\n  name: string;\n  span?: number;\n  label?: string;\n  required?: boolean | undefined;\n  message?: string;\n  initValue?: any;\n  maxLength?: number;\n  precision?: number;\n  serverFormat?: string;\n  handleChange?: (props: any) => void;\n  [propName: string]: any;\n} & FormConfigItemProps;\n\nexport interface selectItem {\n  name: any;\n  value: number;\n}\n\n\ninterface BaseFormProps {\n  type: number;\n  cancelFunc?: () => void;\n  okFunc?: (props: any) => void;\n  resetFunc?: () => void;\n  list?: listItem[];\n}\n")])])]),t("p",[e._v("改版后可以对所有不同的提交项目单独定制化处理，然后相应的组件的props的类也是可以直接引用这里的定义的item类。\n"),t("br")]),e._v(" "),t("p",[e._v("-------------------2020.11.10 更新-----------------")]),e._v(" "),t("p",[e._v("以上方式就是typescript的联合类型。联合类型（Union Types）表示取值可以为多种类型中的一种。\n"),t("br"),e._v("\n例子如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("interface Square {\n  kind: 'square';\n  size: number;\n}\ninterface Rectangle {\n  kind: 'rectangle';\n  width: number;\n  height: number;\n}\ntype Shape = Square | Rectangle;\nfunction area(s: Shape) {\n  switch (s.kind) {\n    case: 'square':\n      return s.size * s.size;\n    case 'rectangle':\n      return s.width * s.height\n  }\n}\n")])])]),t("br"),e._v("\n总结就是联合类型可使类型具有一定的不确定性，提高代码的灵活性。\n")])},[],!1,null,null,null);n.default=a.exports}}]);