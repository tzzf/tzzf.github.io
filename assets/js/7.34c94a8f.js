(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{385:function(n,e,r){n.exports=r.p+"assets/img/flutter(1)1.e1588746.jpg"},386:function(n,e,r){n.exports=r.p+"assets/img/flutter(1)2.e203d682.jpg"},387:function(n,e,r){n.exports=r.p+"assets/img/flutter(1)3.4a43009e.jpg"},405:function(n,e,r){"use strict";r.r(e);var t=r(17),o=Object(t.a)({},function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("p",[n._v("flutter全局状态管理provider")]),n._v(" "),t("p",[n._v("在开发项目中，不论是网页还是app，在获取到后端数据后，有些数据（用户信息）都是需要放在全局之中的，因为在业务逻辑之中肯定需要是需要多页面共享一个状态（用户数据），那么为了方便开发便于维护，方便获取，那么我们就需要利用全局状态管理方式来管理这些需要被共享的状态。\n"),t("br")]),t("h2",[n._v("Provider")]),n._v("\n而provider正是谷歌为了解决这种方法推出的一种解决方法。那么下面我开始介绍下provider的使用。"),t("p"),n._v(" "),t("h2",[n._v("添加依赖")]),n._v("\n在pubspec.yaml中添加provider的依赖,版本你需要去[flutter包网站](https://pub.dev/packages)这个网站上去查看最新版本是什么。\n```\nprovider: ^3.1.0+1\n```\n"),t("h2",[n._v("创建model")]),n._v("\n这里和vuex和redux类似，放到一个文件夹下统一管理多状态。\n"),t("br"),n._v("\n在lib文件夹下创建provide文件夹，然后新建一个model文件（counter.dart）。\n"),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("\nimport 'package:flutter/foundation.dart';\n\n\nclass CounterProvider with ChangeNotifier{\n   int _count = 0;\n\n  // 获取state里的值\n  int get count => _count;\n\n  // 创建方法来修改state里的值\n  void increment() {\n    _count++;\n    notifyListeners(); \n  }\n}\n\n")])])]),t("h2",[n._v("在顶层引入state")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("\nimport 'package:provider/provider.dart';\nimport '../provide/counter.dart';\nimport '../provide/book.dart';\n\n......\n\n@override\nWidget build(BuildContext context) {\n    return MultiProvider(\n        providers: [\n        ChangeNotifierProvider(builder: (_) => CounterProvider()),\n        ChangeNotifierProvider(builder: (_) => BookProvider()),\n        ],\n        child: MaterialApp(\n        home: MyApp(),\n        debugShowCheckedModeBanner: false,\n        ),\n    );\n}\n\n")])])]),t("p",[n._v("这里我展示的多状态引入，一般项目也不会只有一个全局状态。\n"),t("br"),n._v("\nMultiProvider 是provider添加多状态提供的api\n"),t("img",{attrs:{src:r(385)}}),n._v(" "),t("br"),n._v("\nChangeNotifierProvider 相当于监听数据更新，然后通知子页面\n"),t("img",{attrs:{src:r(386)}}),n._v(" "),t("br")]),n._v(" "),t("h2",[n._v("在需要state的子页面获取状态")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("import 'package:provider/provider.dart';\nimport '../../provide/counter.dart';\n\n\n...\n\nfinal counter = Provider.of<CounterProvider>(context);\n\n...\n\nContainer(\n    child: Text('${counter.count}次数'),\n),\nContainer(\n    child: RaisedButton(\n        onPressed: () {\n            print('点击了');\n            Provider.of<CounterProvider>(context, listen: false).increment();\n        },\n        child: Text('点击增长'),\n    )\n),\n")])])]),t("br"),n._v("\nProvider.of 是子页面获取顶层数据的方法。\n"),t("img",{attrs:{src:r(387)}}),n._v(" "),t("br"),n._v("\ncontext 是上下文。 listen 就是state更新是否更新，用法就是如果是变量是写true（默认为true）,如果是方法，就写false。\n"),t("br"),n._v(" "),t("p",[n._v("以上就是provider的一种简易使用，provider还提供其他更高级的api使用。由于我还未使用过，就不赘述了。\n"),t("br")])])},[],!1,null,null,null);e.default=o.exports}}]);