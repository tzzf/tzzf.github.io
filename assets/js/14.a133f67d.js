(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{399:function(e,a,n){"use strict";n.r(a);var s=n(17),t=Object(s.a)({},function(){var e=this,a=e.$createElement,n=e._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("p",[e._v("搭建一个babel环境\n")]),e._v(" "),n("p",[e._v("最近在开始在研究aop，由于就是需要搭建一个babel环境来编译自己写的aop代码。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Babel 是一个工具链，主要用于将 ECMAScript 2015+ 版本的代码转换为向后兼容的 JavaScript 语法，\n以便能够运行在当前和旧版本的浏览器或其他环境中。\n")])])]),n("p",[e._v("安装babel-cli")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("npm install babel-cli -g\n")])])]),n("p",[e._v("新建一个文件夹")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("mkdir babel-js && cd babel-js\n")])])]),n("p",[e._v("开始搭建")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("npm init\n\nnpm install babel-core babel-plugin-transform-runtime babel-preset-es2015 babel-preset-stage-2 babel-plugin-transform-decorators-legacy --save-dev\n")])])]),n("p",[e._v("然后稍微修改下npm的脚本")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('"build": "babel src -w -d lib" // 监听src文件夹下文件的变化然后输出到lib文件夹下\n')])])]),n("p",[e._v("配置下babel")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('touch .babelrc\n\n\n{\n  "presets": ["es2015", "stage-2"],  //设置转码规则\n  "plugins": ["transform-runtime", "transform-decorators-legacy"]  //设置插件\n}\n')])])]),n("p",[e._v("以上呢，就是babel的环境搭建，但是在写的过程，发现希望可以自动化输出自己的写的demo的结果。\n"),n("br")]),e._v(" "),n("p",[e._v("那么下面开始介绍nodemon，nodemon是用来监视nodejs应用程序中的任何更改并自动重启服务，非常适用于开发环境。\n"),n("br"),e._v("\n所以比如我们之前输出的写的demojs，是用node /lib/demo.js。那么现在可以用nodemon来运行这个命令行\n"),n("br"),e._v("\n安装")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("npm install -g nodemon\n")])])]),n("p",[e._v("然后在文件根目录下新建一个nodemon.json，来写nodemon的配置。\n"),n("br"),e._v("\nrestartable-设置重启模式\n"),n("br"),e._v("\nignore-设置忽略文件\n"),n("br"),e._v("\nverbose-设置日志输出模式，true 详细模式\n"),n("br"),e._v("\nexecMap-设置运行服务的后缀名与对应的命令\n"),n("br")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('{ \n    "js": "node –harmony"\n} \n')])])]),n("p",[e._v("表示使用 nodemon 代替 node\n"),n("br"),e._v("\nwatch-监听哪些文件的变化，当变化的时候自动重启\n"),n("br"),e._v("\next-监控指定的后缀文件名\n"),n("br"),e._v("\nexec - 输入nodemon运行的脚本（这个是大部分中文教学文档都没写的）\n"),n("br"),e._v("\n然后输入nodemon。运行写在exec里的脚本\n"),n("br")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('{\n  "watch": [\n    "lib"\n  ],\n  "exec": "node lib/symbol.js"\n}\n')])])]),n("p",[e._v("由于这里功能不需要太多，我也没写太多配置")])])},[],!1,null,null,null);a.default=t.exports}}]);